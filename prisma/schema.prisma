generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  nom           String
  prenom        String
  email         String   @unique
  username      String   @unique
  password      String
  isEmailVerified Boolean @default(false)
  emailToken    String?  @unique
  resetPasswordToken String? @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  gamesCreated  Game[]   @relation("GameCreator")
  gamePlayers   GamePlayer[]
  scores        Score[]

  @@map("users")
}

model Game {
  id          String       @id @default(cuid())
  creatorId   String
  status      GameStatus   @default(WAITING)
  currentTurn Int          @default(0)
  maxPlayers  Int          @default(2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creator     User         @relation("GameCreator", fields: [creatorId], references: [id])
  players     GamePlayer[]
  questions   Question[]
  scores      Score[]

  @@map("games")
}

model GamePlayer {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  joinedAt  DateTime @default(now())
  isHost    Boolean  @default(false)
  score     Int      @default(0)

  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
  @@map("game_players")
}

model Question {
  id        String   @id @default(cuid())
  gameId    String
  playerId  String // The player to guess
  round     Int
  createdAt DateTime @default(now())

  game      Game     @relation(fields: [gameId], references: [id])

  @@map("questions")
}

model Score {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  score     Int
  won       Boolean
  createdAt DateTime @default(now())

  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("scores")
}

enum GameStatus {
  WAITING
  IN_PROGRESS
  FINISHED
  CANCELLED
}